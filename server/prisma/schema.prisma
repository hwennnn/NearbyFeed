// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PendingUser {
  id        String   @id @default(uuid())
  username  String
  email     String
  password  String
  createdAt DateTime @default(now())
}

model User {
  id            Int           @id @default(autoincrement())
  username      String
  email         String        @unique
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  image         String?
  posts         Post[]
  comments      Comment[]
  likedPosts    PostLike[]
  likedComments CommentLike[]
  PollVote      PollVote[]
}

model Post {
  id               Int        @id @default(autoincrement())
  title            String
  content          String?
  latitude         Float
  longitude        Float
  locationName     String?
  fullLocationName String?
  image            String?
  points           Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  author           User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         Int
  commentsCount    Int        @default(0)
  comments         Comment[]
  likes            PostLike[]
  Poll             Poll[]
}

model Comment {
  id              Int           @id @default(autoincrement())
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
  points          Int           @default(0)
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          Int
  author          User          @relation(fields: [authorId], references: [id])
  authorId        Int
  parentCommentId Int?
  repliesCount    Int           @default(0)
  likes           CommentLike[]
  parentComment   Comment?      @relation("ChildComments", fields: [parentCommentId], references: [id])
  replies         Comment[]     @relation("ChildComments")
}

model PostLike {
  id        Int      @default(autoincrement())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([postId, userId])
}

model CommentLike {
  id        Int      @default(autoincrement())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([commentId, userId])
}

model Poll {
  id                Int          @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  postId            Int
  post              Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  votingLength      Int
  participantsCount Int          @default(0)
  options           PollOption[]
  pollVotes         PollVote[]
}

model PollOption {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  text      String
  pollId    Int
  voteCount Int        @default(0)
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollVotes PollVote[]
}

model PollVote {
  id           Int        @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  pollId       Int
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionId Int
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@id([pollId, userId])
}
