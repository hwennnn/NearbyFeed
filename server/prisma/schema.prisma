// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PendingUser {
  id        String   @id @default(uuid())
  username  String
  email     String
  password  String
  createdAt DateTime @default(now())
}

model User {
  id            Int           @id @default(autoincrement())
  username      String
  email         String        @unique
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)
  image         String?
  posts         Post[]
  comments      Comment[]
  likedPosts    PostLike[]
  likedComments CommentLike[]
  votedPolls    PollVote[]
  providers     Provider[]

  blockedUsers   BlockedUser[] @relation("Blocker")
  blockedByUsers BlockedUser[] @relation("Blocked")
}

model BlockedUser {
  id        Int      @default(autoincrement())
  blockerId Int
  blockedId Int
  createdAt DateTime @default(now())

  blocker User @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Provider {
  providerName String
  isActive     Boolean
  userId       Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, userId])
}

model Post {
  id               Int          @id @default(autoincrement())
  title            String
  content          String?
  latitude         Float
  longitude        Float
  locationName     String?
  fullLocationName String?
  isEdited         Boolean      @default(false)
  isActive         Boolean      @default(true)
  images           String[]
  points           Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  author           User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         Int
  commentsCount    Int          @default(0)
  comments         Comment[]
  likes            PostLike[]
  poll             Poll?
  reports          PostReport[]
}

model Comment {
  id              Int             @id @default(autoincrement())
  content         String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isActive        Boolean         @default(true)
  points          Int             @default(0)
  post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          Int
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        Int
  parentCommentId Int?
  repliesCount    Int             @default(0)
  likes           CommentLike[]
  parentComment   Comment?        @relation("ChildComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[]       @relation("ChildComments")
  reports         CommentReport[]
}

model PostLike {
  id        Int      @default(autoincrement())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([postId, userId])
}

model CommentLike {
  id        Int      @default(autoincrement())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([commentId, userId])
}

model Poll {
  id                Int          @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  postId            Int          @unique
  post              Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  votingLength      Int
  participantsCount Int          @default(0)
  options           PollOption[]
  pollVotes         PollVote[]
}

model PollOption {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  text      String
  voteCount Int        @default(0)
  order     Int
  pollId    Int
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollVotes PollVote[]
}

model PollVote {
  id           Int        @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollId       Int
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionId Int
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@id([pollId, userId])
}

enum ReportReason {
  SPAM
  HARASSMENT_OR_BULLYING
  HATE_SPEECH
  VIOLENCE_OR_THREATS
  INAPPROPRIATE_CONTENT
  FALSE_INFORMATION
  COPYRIGHT_INFRINGEMENT
  PRIVACY_VIOLATION
  SELF_HARM_OR_SUICIDE
  TERRORISM_OR_EXTREMISM
}

model PostReport {
  id        Int          @id @default(autoincrement())
  postId    Int
  reason    ReportReason
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommentReport {
  id        Int          @id @default(autoincrement())
  commentId Int
  reason    ReportReason
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
